require(magrittr)
# set pander table-layout options
library(pander)
panderOptions('table.alignment.default', function(df)
ifelse(sapply(df, is.numeric), 'right', 'left'))
panderOptions('table.split.table', Inf)
panderOptions('big.mark', ",")
panderOptions('keep.trailing.zeros', TRUE)
# enter sample ID
sampleID <- 'DG906'
# get software and database versions
versionList <- list.files('../vcf', pattern = '_versions.txt', full.names = T)
versionFile <- versionList[grep(sampleID, versionList)]
# load version info
versions <- read.csv(versionFile, head = F, as.is = T)
# get run ID
# ...extraction script here...
setwd("/media/disk1part1/PostDoc/Neven/pipeline/report")
# enter sample ID
sampleID <- 'DG906'
# get software and database versions
versionList <- list.files('../vcf', pattern = '_versions.txt', full.names = T)
versionFile <- versionList[grep(sampleID, versionList)]
# load version info
versions <- read.csv(versionFile, head = F, as.is = T)
# get run ID
# ...extraction script here...
version
versions
colnames(version)
colnames(versions)
colnames(versions) <- 'Parameters'
versions
panderOptions('table.split.table', Inf)
panderOptions('digits', 2)
pander(versions)
grep('hg', versions)
versions[grep('hg', versions),]
tier3 <- list.files('../results/Tier_3', pattern = '.csv', full.names = T)
# enter sample ID
sampleID <- 'DG915'
# get software and database versions
versionList <- list.files('../vcf', pattern = '_versions.txt', full.names = T)
versionFile <- versionList[grep(sampleID, versionList)]
# load version info
versions <- read.csv(versionFile, head = F, as.is = T)
colnames(versions) <- 'Parameters'
# get run ID
# ...extraction script here...
runID <- 'XXX'  # placeholder
# genome build
genomeBuild <- 'hg19'
versionList
pander(versions)
tier1 <- list.files('../results/Tier_1', pattern = '.csv', full.names = T)
tier1 <- tier1[grep(sampleID, tier1)]
tier1_table <- read.delim(tier1, head = T, as.is = T)
# tier1_table[tier1_table == ''] <- '.'
# tier1_table[is.na(tier1_table)] <- '.'
# gene
tier1_table$gene <- gsub('^.;', '', tier1_table$gene)
tier1_table$gene <- sapply(sapply(strsplit(tier1_table$gene, ";"), unique), paste, collapse = ";")
# aa change
# tier1_table$amino_acid_substitution <- gsub(";$", "", tier1_table$amino_acid_substitution)
# tier1_table$amino_acid_substitution <- ifelse(tier1_table$amino_acid_substitution == ".", ".:.", tier1_table$amino_acid_substitution)
# SIFT
tier1_table$SIFT <- sapply(sapply(strsplit(tier1_table$SIFT, ","), unique), paste, collapse = ";")
# MutationTaster
tier1_table$MutationTaster <- sapply(sapply(strsplit(tier1_table$MutationTaster, ","), unique), paste, collapse = ";")
# Polyphen2
tier1_table$Polyphen2 <- sapply(sapply(strsplit(tier1_table$Polyphen2, ","), unique), paste, collapse = ";")
# 1KG allele freqs
tier1_table$CAF1[tier1_table$CAF1 == '.'] <- 0
tier1_table$CAF1 <- as.numeric(tier1_table$CAF1)
tier1_table$CAF2[tier1_table$CAF2 == '.'] <- 0
tier1_table$CAF2 <- as.numeric(tier1_table$CAF2)
#
tier1_clean <- data.frame(location = paste(tier1_table$chromosome, tier1_table$position, sep = ':'),
genotype = ifelse(tier1_table$genotype == '0/1', paste(tier1_table$reference_allele, tier1_table$alternate_allele, sep = '/'), ifelse(tier1_table$genotype == '1/1', paste(tier1_table$alternate_allele, tier1_table$alternate_allele, sep = '/'), tier1_table$genotype)),
ref = tier1_table$reference_allele,
alt = tier1_table$alternate_allele,
dbSNP = tier1_table$id,
gene = tier1_table$gene,
transcript = strsplit(tier1_table$transcript, split = ';') %>% lapply(., `[[`, 1) %>% unlist(.),
coding = unlist(lapply(strsplit(tier1_table$coding, split = ';'), `[[`, 1)),
AAchange = unlist(lapply(strsplit(tier1_table$amino_acid_substitution, split = ';'), `[[`, 1)),
MutationTaster = tier1_table$MutationTaster,
SIFT = tier1_table$SIFT,
Polyphen2 = tier1_table$Polyphen2,
coverage = paste0(tier1_table$depth_coverage, ' ', tier1_table$reference_allele, '(', tier1_table$Ref_coverage,
')', ' ', tier1_table$alternate_allele, '(', tier1_table$Alt_coverage, ')'),
ref_freq = tier1_table$CAF1,
alt_freq = tier1_table$CAF2)
# write clean table out to results dir
fileDate <- format(Sys.time(), "%a_%b_%d_%Y")
outFile <- paste0('../results/Tier_1/clean/', sampleID, '_Tier1_results_clean_', fileDate, '.csv')
write.csv(tier1_clean, outFile, row.names = F)
tier1_mostdamg <- tier1_clean[tier1_clean$MutationTaster == "D",]
rownames(tier1_mostdamg) <- c(1:nrow(tier1_mostdamg))
# not to split tables
panderOptions('table.split.table', Inf)
panderOptions('digits', 2)
# panderOptions('table.style', 'simple')
# create table
emphasize.cols(6) # italics for gene names
# set.alignment(c('right', 'center'), row.names = 'right')
pander(tier1_mostdamg, caption = "Top 10 Most Damaging Mutations/Variants")
tier1_mutations <- tier1_clean[tier1_clean$dbSNP == '.' & tier1_clean$AAchange != '.',]
rownames(tier1_mutations) <- c(1:nrow(tier1_mutations))
head(tier1_clean)
tier1_mutations <- tier1_clean[tier1_clean$dbSNP == '.' & tier1_clean$AAchange != '.',]
ifelse(nrow(tier1_mutations) == 0, 'yep', 'nope')
pander(tier1_mutations, caption = "Amino acid changing variant, no rs#")
if(nrow(tier1_mutations) != 0, rownames(tier1_mutations) <- c(1:nrow(tier1_mutations)))
ifelse(nrow(tier1_mutations) != 0, rownames(tier1_mutations) <- c(1:nrow(tier1_mutations)), 'blank')
sampleID <- 'DG915'
if (nrow(tier1_mutations) != 0) pander(tier1_mutations, caption = "Amino acid changing variant, no rs#")
if (nrow(tier1_mutations) != 0) rownames(tier1_mutations) <- c(1:nrow(tier1_mutations))
"grep -A 8 '\[General' ../vcf/DG534_CACNA1A_025_dbSNP_VEP.vcf_summary.txt"
read.table('../vcf/DG534_CACNA1A_025_dbSNP_VEP.vcf_summary.txt', head = F)
read.delim('../vcf/DG534_CACNA1A_025_dbSNP_VEP.vcf_summary.txt', head = F)
test <- read.delim('../vcf/DG534_CACNA1A_025_dbSNP_VEP.vcf_summary.txt', head = F)
head(test)
test <- read.cvs('../vcf/DG534_CACNA1A_025_dbSNP_VEP.vcf_summary.txt', head = F)
test <- read.csv('../vcf/DG534_CACNA1A_025_dbSNP_VEP.vcf_summary.txt', head = F)
head(test)
head(test, n = 10)
head(test, n = 20)
scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt')
?scan
scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', skip=1)
scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'character')
head(scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'character'))
head(scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'list'))
head(scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'comples'))
head(scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'complex'))
head(scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw'))
head(scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ''))
head(scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = '\t'))
head(scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = '\t'), n = 25)
head(scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ','), n = 25)
head(scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 11), n = 25)
head(scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 11, nmax = 10), n = 25)
head(scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 11, nmax = 9), n = 25)
scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 11, nmax = 9)
generalStats <- scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 11, nmax = 9)
strsplit(generalStats, split = '\t')
as.data.frame(strsplit(generalStats, split = '\t'))
strsplit(generalStats, split = '\t')
generalStats <- scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 12, nmax = 8)
strsplit(generalStats, split = '\t')
lapply(strsplit(generalStats, split = '\t'), `[[`, 1)
uinlist(lapply(strsplit(generalStats, split = '\t'), `[[`, 1))
unlist(lapply(strsplit(generalStats, split = '\t'), `[[`, 1))
data.frame(unlist(lapply(strsplit(generalStats, split = '\t'), `[[`, 1)),
unlist(lapply(strsplit(generalStats, split = '\t'), `[[`, 2)))
data.frame(unlist(lapply(observation = strsplit(generalStats, split = '\t'), `[[`, 1)),
unlist(lapply(n = strsplit(generalStats, split = '\t'), `[[`, 2)))
data.frame(observation = unlist(lapply(strsplit(generalStats, split = '\t'), `[[`, 1)),
n = unlist(lapply(strsplit(generalStats, split = '\t'), `[[`, 2)))
pander(generalStats)
generalStats <- data.frame(observation = unlist(lapply(strsplit(generalStats, split = '\t'), `[[`, 1)),
n = unlist(lapply(strsplit(generalStats, split = '\t'), `[[`, 2)))
pander(generalStats)
require(knitr)
kable(generalStats)
kable(generalStats, col.names = NULL)
kable(generalStats, col.names = "")
kable(generalStats, col.names = c("",""))
generalStats <- scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 12, nmax = 8)
generalStats <- data.frame(observation = unlist(lapply(strsplit(generalStats, split = '\t'), `[[`, 1)),
n = unlist(lapply(strsplit(generalStats, split = '\t'), `[[`, 2)))
kable(generalStats, col.names = c("",""))
pander(generalStats, col.names = c("",""))
require(tabler)
?tabler
?`tabler-package`
tableplot()
tabler()
draw(generalStats)
draw(generalStats[c(1:8)])
draw(generalStats[c(1:8),])
draw(as.matrix(generalStats)[c(1:8),])
as.matrix(generalStats)
names(as.matrix(generalStats))
colnames(as.matrix(generalStats))
colnames(as.matrix(generalStats)) <- NULL
require(xtable)
xtable(generalStats)
install.packages("pixiedust")
require(pixiedust)
broom::tidy(generalStats)
dust(generalStats)
?sprinkle_colnames
?sprinkle_colnames %>% sprinkle_colnames(NULL)
dust(generalStats) %>% sprinkle_colnames(NULL)
kable(generalStats, format = "markdown")
kable(generalStats, format = "markdown", col.names = c('', ''))
?kable
generalStats <- scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 12, nmax = 8)
generalStats
generalStats <- gsub('\t', '', generalStats)
??kable
pander(generalStats)
generalStats
xtable(pander())
xtable(generalStats)
generalStats <- gsub('\t', '\n', generalStats)
print(generalStats)
generalStats <- gsub('\t', ' ', generalStats)
print(generalStats)
print(generalStats)
paste(generalStats)
cat(generalStats)
paste(generalStats)
list(generalStats)
pander(list(generalStats))
pandoc.indent(generalStats)
pandoc.list(generalStats)
?pandoc.list
pandoc.list(generalStats[c(2,3,5:8)])
generalStats <- scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 12, nmax = 8)
generalStats <- gsub('\t', ' ', generalStats)
pandoc.list(generalStats[c(2,3,5:8)])
scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 12, nmax = 8)
scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 17, nmax = 8)
scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 20, nmax = 8)
scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 21, nmax = 8)
scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 22, nmax = 8)
scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 22, nmax = 5)
scan('../vcf/DG515_NOTCH3_024_dbSNP_VEP.vcf_summary.txt', what = 'raw', sep = ',', skip = 30, nmax = 20)
